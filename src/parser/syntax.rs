use cstree::Syntax;
use pg_query::{protobuf::ScanToken, Node, NodeEnum, NodeRef};

use crate::parser::expr_parser::ExprToken;

// this can be generated later
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u32)]
#[derive(Syntax)]
pub enum SyntaxKind {
    // custom nodes
    Root,
    Comment,
    Whitespace,
    Newline,
    Tab,
    Keyword, // common syntax for all keywords (select, from, ...)
    // from here copyied from NodeEnum
    Alias,
    RangeVar,
    TableFunc,
    Expr,
    Var,
    Param,
    Aggref,
    GroupingFunc,
    WindowFunc,
    SubscriptingRef,
    FuncExpr,
    NamedArgExpr,
    OpExpr,
    DistinctExpr,
    NullIfExpr,
    ScalarArrayOpExpr,
    BoolExpr,
    SubLink,
    SubPlan,
    AlternativeSubPlan,
    FieldSelect,
    FieldStore,
    RelabelType,
    CoerceViaIo,
    ArrayCoerceExpr,
    ConvertRowtypeExpr,
    CollateExpr,
    CaseExpr,
    CaseWhen,
    CaseTestExpr,
    ArrayExpr,
    RowExpr,
    RowCompareExpr,
    CoalesceExpr,
    MinMaxExpr,
    SqlvalueFunction,
    XmlExpr,
    NullTest,
    BooleanTest,
    CoerceToDomain,
    CoerceToDomainValue,
    SetToDefault,
    CurrentOfExpr,
    NextValueExpr,
    InferenceElem,
    TargetEntry,
    RangeTblRef,
    JoinExpr,
    FromExpr,
    OnConflictExpr,
    IntoClause,
    RawStmt,
    Query,
    InsertStmt,
    DeleteStmt,
    UpdateStmt,
    SelectStmt,
    AlterTableStmt,
    AlterTableCmd,
    AlterDomainStmt,
    SetOperationStmt,
    GrantStmt,
    GrantRoleStmt,
    AlterDefaultPrivilegesStmt,
    ClosePortalStmt,
    ClusterStmt,
    CopyStmt,
    CreateStmt,
    DefineStmt,
    DropStmt,
    TruncateStmt,
    CommentStmt,
    FetchStmt,
    IndexStmt,
    CreateFunctionStmt,
    AlterFunctionStmt,
    DoStmt,
    RenameStmt,
    RuleStmt,
    NotifyStmt,
    ListenStmt,
    UnlistenStmt,
    TransactionStmt,
    ViewStmt,
    LoadStmt,
    CreateDomainStmt,
    CreatedbStmt,
    DropdbStmt,
    VacuumStmt,
    ExplainStmt,
    CreateTableAsStmt,
    CreateSeqStmt,
    AlterSeqStmt,
    VariableSetStmt,
    VariableShowStmt,
    DiscardStmt,
    CreateTrigStmt,
    CreatePlangStmt,
    CreateRoleStmt,
    AlterRoleStmt,
    DropRoleStmt,
    LockStmt,
    ConstraintsSetStmt,
    ReindexStmt,
    CheckPointStmt,
    CreateSchemaStmt,
    AlterDatabaseStmt,
    AlterDatabaseSetStmt,
    AlterRoleSetStmt,
    CreateConversionStmt,
    CreateCastStmt,
    CreateOpClassStmt,
    CreateOpFamilyStmt,
    AlterOpFamilyStmt,
    PrepareStmt,
    ExecuteStmt,
    DeallocateStmt,
    DeclareCursorStmt,
    CreateTableSpaceStmt,
    DropTableSpaceStmt,
    AlterObjectDependsStmt,
    AlterObjectSchemaStmt,
    AlterOwnerStmt,
    AlterOperatorStmt,
    AlterTypeStmt,
    DropOwnedStmt,
    ReassignOwnedStmt,
    CompositeTypeStmt,
    CreateEnumStmt,
    CreateRangeStmt,
    AlterEnumStmt,
    AlterTsdictionaryStmt,
    AlterTsconfigurationStmt,
    CreateFdwStmt,
    AlterFdwStmt,
    CreateForeignServerStmt,
    AlterForeignServerStmt,
    CreateUserMappingStmt,
    AlterUserMappingStmt,
    DropUserMappingStmt,
    AlterTableSpaceOptionsStmt,
    AlterTableMoveAllStmt,
    SecLabelStmt,
    CreateForeignTableStmt,
    ImportForeignSchemaStmt,
    CreateExtensionStmt,
    AlterExtensionStmt,
    AlterExtensionContentsStmt,
    CreateEventTrigStmt,
    AlterEventTrigStmt,
    RefreshMatViewStmt,
    ReplicaIdentityStmt,
    AlterSystemStmt,
    CreatePolicyStmt,
    AlterPolicyStmt,
    CreateTransformStmt,
    CreateAmStmt,
    CreatePublicationStmt,
    AlterPublicationStmt,
    CreateSubscriptionStmt,
    AlterSubscriptionStmt,
    DropSubscriptionStmt,
    CreateStatsStmt,
    AlterCollationStmt,
    CallStmt,
    AlterStatsStmt,
    AExpr,
    ColumnRef,
    ParamRef,
    AConst,
    FuncCall,
    AStar,
    AIndices,
    AIndirection,
    AArrayExpr,
    ResTarget,
    MultiAssignRef,
    TypeCast,
    CollateClause,
    SortBy,
    WindowDef,
    RangeSubselect,
    RangeFunction,
    RangeTableSample,
    RangeTableFunc,
    RangeTableFuncCol,
    TypeName,
    ColumnDef,
    IndexElem,
    Constraint,
    DefElem,
    RangeTblEntry,
    RangeTblFunction,
    TableSampleClause,
    WithCheckOption,
    SortGroupClause,
    GroupingSet,
    WindowClause,
    ObjectWithArgs,
    AccessPriv,
    CreateOpClassItem,
    TableLikeClause,
    FunctionParameter,
    LockingClause,
    RowMarkClause,
    XmlSerialize,
    WithClause,
    InferClause,
    OnConflictClause,
    CommonTableExpr,
    RoleSpec,
    TriggerTransition,
    PartitionElem,
    PartitionSpec,
    PartitionBoundSpec,
    PartitionRangeDatum,
    PartitionCmd,
    VacuumRelation,
    InlineCodeBlock,
    CallContext,
    // Integer,
    Float,
    String,
    BitString,
    Null,
    List,
    IntList,
    OidList,
    // from here copied from protobuf::Token
    Nul,
    /// Single-character tokens that are returned 1:1 (identical with "self" list in scan.l)
    /// Either supporting syntax, or single-character operators (some can be both)
    /// Also see <https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-SYNTAX-SPECIAL-CHARS>
    ///
    /// "%"
    Ascii37,
    /// "("
    Ascii40,
    /// ")"
    Ascii41,
    /// "*"
    Ascii42,
    /// "+"
    Ascii43,
    /// ","
    Ascii44,
    /// "-"
    Ascii45,
    /// "."
    Ascii46,
    /// "/"
    Ascii47,
    /// ":"
    Ascii58,
    /// ";"
    Ascii59,
    /// "<"
    Ascii60,
    /// ",
    Ascii61,
    /// ">"
    Ascii62,
    /// "?"
    Ascii63,
    /// "["
    Ascii91,
    /// "\"
    Ascii92,
    /// "]"
    Ascii93,
    /// "^"
    Ascii94,
    /// Named tokens in scan.l
    Ident,
    Uident,
    Fconst,
    Sconst,
    Usconst,
    Bconst,
    Xconst,
    Op,
    Iconst,
    // Param,
    Typecast,
    DotDot,
    ColonEquals,
    EqualsGreater,
    LessEquals,
    GreaterEquals,
    NotEquals,
    SqlComment,
    CComment,
    AbortP,
    AbsoluteP,
    Access,
    Action,
    AddP,
    Admin,
    After,
    Aggregate,
    All,
    Also,
    Alter,
    Always,
    Analyse,
    Analyze,
    And,
    Any,
    Array,
    As,
    Asc,
    Assertion,
    Assignment,
    Asymmetric,
    At,
    Attach,
    Attribute,
    Authorization,
    Backward,
    Before,
    BeginP,
    Between,
    Bigint,
    Binary,
    Bit,
    BooleanP,
    Both,
    By,
    Cache,
    Call,
    Called,
    Cascade,
    Cascaded,
    Case,
    Cast,
    CatalogP,
    Chain,
    CharP,
    Character,
    Characteristics,
    Check,
    Checkpoint,
    Class,
    Close,
    Cluster,
    Coalesce,
    Collate,
    Collation,
    Column,
    Columns,
    // Comment,
    Comments,
    Commit,
    Committed,
    Concurrently,
    Configuration,
    Conflict,
    Connection,
    // Constraint,
    Constraints,
    ContentP,
    ContinueP,
    ConversionP,
    Copy,
    Cost,
    Create,
    Cross,
    Csv,
    Cube,
    CurrentP,
    CurrentCatalog,
    CurrentDate,
    CurrentRole,
    CurrentSchema,
    CurrentTime,
    CurrentTimestamp,
    CurrentUser,
    Cursor,
    Cycle,
    DataP,
    Database,
    DayP,
    Deallocate,
    Dec,
    DecimalP,
    Declare,
    Default,
    Defaults,
    Deferrable,
    Deferred,
    Definer,
    DeleteP,
    Delimiter,
    Delimiters,
    Depends,
    Desc,
    Detach,
    Dictionary,
    DisableP,
    Discard,
    Distinct,
    Do,
    DocumentP,
    DomainP,
    DoubleP,
    Drop,
    Each,
    Else,
    EnableP,
    Encoding,
    Encrypted,
    EndP,
    EnumP,
    Escape,
    Event,
    Except,
    Exclude,
    Excluding,
    Exclusive,
    Execute,
    Exists,
    Explain,
    Expression,
    Extension,
    External,
    Extract,
    FalseP,
    Family,
    Fetch,
    Filter,
    FirstP,
    FloatP,
    Following,
    For,
    Force,
    Foreign,
    Forward,
    Freeze,
    From,
    Full,
    Function,
    Functions,
    Generated,
    Global,
    Grant,
    Granted,
    Greatest,
    GroupP,
    Grouping,
    Groups,
    Handler,
    Having,
    HeaderP,
    Hold,
    HourP,
    IdentityP,
    IfP,
    Ilike,
    Immediate,
    Immutable,
    ImplicitP,
    ImportP,
    InP,
    Include,
    Including,
    Increment,
    Index,
    Indexes,
    Inherit,
    Inherits,
    Initially,
    InlineP,
    InnerP,
    Inout,
    InputP,
    Insensitive,
    Insert,
    Instead,
    IntP,
    Integer,
    Intersect,
    Interval,
    Into,
    Invoker,
    Is,
    Isnull,
    Isolation,
    Join,
    Key,
    Label,
    Language,
    LargeP,
    LastP,
    LateralP,
    Leading,
    Leakproof,
    Least,
    Left,
    Level,
    Like,
    Limit,
    Listen,
    Load,
    Local,
    Localtime,
    Localtimestamp,
    Location,
    LockP,
    Locked,
    Logged,
    Mapping,
    Match,
    Materialized,
    Maxvalue,
    Method,
    MinuteP,
    Minvalue,
    Mode,
    MonthP,
    Move,
    NameP,
    Names,
    National,
    Natural,
    Nchar,
    New,
    Next,
    Nfc,
    Nfd,
    Nfkc,
    Nfkd,
    No,
    None,
    Normalize,
    Normalized,
    Not,
    Nothing,
    Notify,
    Notnull,
    Nowait,
    NullP,
    Nullif,
    NullsP,
    Numeric,
    ObjectP,
    Of,
    Off,
    Offset,
    Oids,
    Old,
    On,
    Only,
    Operator,
    Option,
    Options,
    Or,
    Order,
    Ordinality,
    Others,
    OutP,
    OuterP,
    Over,
    Overlaps,
    Overlay,
    Overriding,
    Owned,
    Owner,
    Parallel,
    Parser,
    Partial,
    Partition,
    Passing,
    Password,
    Placing,
    Plans,
    Policy,
    Position,
    Preceding,
    Precision,
    Preserve,
    Prepare,
    Prepared,
    Primary,
    Prior,
    Privileges,
    Procedural,
    Procedure,
    Procedures,
    Program,
    Publication,
    Quote,
    Range,
    Read,
    Real,
    Reassign,
    Recheck,
    Recursive,
    Ref,
    References,
    Referencing,
    Refresh,
    Reindex,
    RelativeP,
    Release,
    Rename,
    Repeatable,
    Replace,
    Replica,
    Reset,
    Restart,
    Restrict,
    Returning,
    Returns,
    Revoke,
    Right,
    Role,
    Rollback,
    Rollup,
    Routine,
    Routines,
    Row,
    Rows,
    Rule,
    Savepoint,
    Schema,
    Schemas,
    Scroll,
    Search,
    SecondP,
    Security,
    Select,
    Sequence,
    Sequences,
    Serializable,
    Server,
    Session,
    SessionUser,
    Set,
    Sets,
    Setof,
    Share,
    Show,
    Similar,
    Simple,
    Skip,
    Smallint,
    Snapshot,
    Some,
    SqlP,
    Stable,
    StandaloneP,
    Start,
    Statement,
    Statistics,
    Stdin,
    Stdout,
    Storage,
    Stored,
    StrictP,
    StripP,
    Subscription,
    Substring,
    Support,
    Symmetric,
    Sysid,
    SystemP,
    Table,
    Tables,
    Tablesample,
    Tablespace,
    Temp,
    Template,
    Temporary,
    TextP,
    Then,
    Ties,
    Time,
    Timestamp,
    To,
    Trailing,
    Transaction,
    Transform,
    Treat,
    Trigger,
    Trim,
    TrueP,
    Truncate,
    Trusted,
    TypeP,
    TypesP,
    Uescape,
    Unbounded,
    Uncommitted,
    Unencrypted,
    Union,
    Unique,
    Unknown,
    Unlisten,
    Unlogged,
    Until,
    Update,
    User,
    Using,
    Vacuum,
    Valid,
    Validate,
    Validator,
    ValueP,
    Values,
    Varchar,
    Variadic,
    Varying,
    Verbose,
    VersionP,
    View,
    Views,
    Volatile,
    When,
    Where,
    WhitespaceP,
    Window,
    With,
    Within,
    Without,
    Work,
    Wrapper,
    Write,
    XmlP,
    Xmlattributes,
    Xmlconcat,
    Xmlelement,
    Xmlexists,
    Xmlforest,
    Xmlnamespaces,
    Xmlparse,
    Xmlpi,
    Xmlroot,
    Xmlserialize,
    Xmltable,
    YearP,
    YesP,
    Zone,
    NotLa,
    NullsLa,
    WithLa,
    Postfixop,
    Uminus,
}

pub fn convert_pg_query_node_to_syntax_kind(node: &NodeRef) -> Option<SyntaxKind> {
    match node {
        NodeRef::SelectStmt(_) => Some(SyntaxKind::SelectStmt),
        NodeRef::CreateFunctionStmt(_) => Some(SyntaxKind::CreateFunctionStmt),
        NodeRef::ResTarget(_) => Some(SyntaxKind::ResTarget),
        NodeRef::AExpr(_) => Some(SyntaxKind::AExpr),
        NodeRef::RangeVar(_) => Some(SyntaxKind::RangeVar),
        NodeRef::ColumnRef(_) => Some(SyntaxKind::ColumnRef),
        NodeRef::AConst(_) => Some(SyntaxKind::AConst),
        _ => None,
    }
}

pub fn convert_pg_query_token_to_syntax_kind(token: &ScanToken) -> Option<SyntaxKind> {
    println!("converting: {:?}", token);
    match token.token {
        0 => Some(SyntaxKind::Nul),
        37 => Some(SyntaxKind::Ascii37),
        40 => Some(SyntaxKind::Ascii40),
        41 => Some(SyntaxKind::Ascii41),
        42 => Some(SyntaxKind::Ascii42),
        43 => Some(SyntaxKind::Ascii43),
        44 => Some(SyntaxKind::Ascii44),
        45 => Some(SyntaxKind::Ascii45),
        46 => Some(SyntaxKind::Ascii46),
        47 => Some(SyntaxKind::Ascii47),
        58 => Some(SyntaxKind::Ascii58),
        59 => Some(SyntaxKind::Ascii59),
        60 => Some(SyntaxKind::Ascii60),
        61 => Some(SyntaxKind::Ascii61),
        62 => Some(SyntaxKind::Ascii62),
        63 => Some(SyntaxKind::Ascii63),
        91 => Some(SyntaxKind::Ascii91),
        92 => Some(SyntaxKind::Ascii92),
        93 => Some(SyntaxKind::Ascii93),
        94 => Some(SyntaxKind::Ascii94),
        258 => Some(SyntaxKind::Ident),
        259 => Some(SyntaxKind::Uident),
        260 => Some(SyntaxKind::Fconst),
        261 => Some(SyntaxKind::Sconst),
        262 => Some(SyntaxKind::Usconst),
        263 => Some(SyntaxKind::Bconst),
        264 => Some(SyntaxKind::Xconst),
        265 => Some(SyntaxKind::Op),
        266 => Some(SyntaxKind::Iconst),
        267 => Some(SyntaxKind::Param),
        268 => Some(SyntaxKind::Typecast),
        269 => Some(SyntaxKind::DotDot),
        270 => Some(SyntaxKind::ColonEquals),
        271 => Some(SyntaxKind::EqualsGreater),
        272 => Some(SyntaxKind::LessEquals),
        273 => Some(SyntaxKind::GreaterEquals),
        274 => Some(SyntaxKind::NotEquals),
        275 => Some(SyntaxKind::SqlComment),
        276 => Some(SyntaxKind::CComment),
        277 => Some(SyntaxKind::AbortP),
        278 => Some(SyntaxKind::AbsoluteP),
        279 => Some(SyntaxKind::Access),
        280 => Some(SyntaxKind::Action),
        281 => Some(SyntaxKind::AddP),
        282 => Some(SyntaxKind::Admin),
        283 => Some(SyntaxKind::After),
        284 => Some(SyntaxKind::Aggregate),
        285 => Some(SyntaxKind::All),
        286 => Some(SyntaxKind::Also),
        287 => Some(SyntaxKind::Alter),
        288 => Some(SyntaxKind::Always),
        289 => Some(SyntaxKind::Analyse),
        290 => Some(SyntaxKind::Analyze),
        291 => Some(SyntaxKind::And),
        292 => Some(SyntaxKind::Any),
        293 => Some(SyntaxKind::Array),
        294 => Some(SyntaxKind::As),
        295 => Some(SyntaxKind::Asc),
        296 => Some(SyntaxKind::Assertion),
        297 => Some(SyntaxKind::Assignment),
        298 => Some(SyntaxKind::Asymmetric),
        299 => Some(SyntaxKind::At),
        300 => Some(SyntaxKind::Attach),
        301 => Some(SyntaxKind::Attribute),
        302 => Some(SyntaxKind::Authorization),
        303 => Some(SyntaxKind::Backward),
        305 => Some(SyntaxKind::BeginP),
        306 => Some(SyntaxKind::Between),
        307 => Some(SyntaxKind::Bigint),
        308 => Some(SyntaxKind::Binary),
        309 => Some(SyntaxKind::Bit),
        310 => Some(SyntaxKind::BooleanP),
        311 => Some(SyntaxKind::Both),
        312 => Some(SyntaxKind::By),
        313 => Some(SyntaxKind::Cache),
        314 => Some(SyntaxKind::Call),
        315 => Some(SyntaxKind::Called),
        316 => Some(SyntaxKind::Cascade),
        317 => Some(SyntaxKind::Cascaded),
        318 => Some(SyntaxKind::Case),
        319 => Some(SyntaxKind::Cast),
        320 => Some(SyntaxKind::CatalogP),
        321 => Some(SyntaxKind::Chain),
        322 => Some(SyntaxKind::CharP),
        323 => Some(SyntaxKind::Character),
        324 => Some(SyntaxKind::Characteristics),
        325 => Some(SyntaxKind::Check),
        326 => Some(SyntaxKind::Checkpoint),
        327 => Some(SyntaxKind::Class),
        328 => Some(SyntaxKind::Close),
        329 => Some(SyntaxKind::Cluster),
        330 => Some(SyntaxKind::Coalesce),
        331 => Some(SyntaxKind::Collate),
        332 => Some(SyntaxKind::Collation),
        333 => Some(SyntaxKind::Column),
        334 => Some(SyntaxKind::Columns),
        335 => Some(SyntaxKind::Comment),
        336 => Some(SyntaxKind::Comments),
        337 => Some(SyntaxKind::Commit),
        338 => Some(SyntaxKind::Committed),
        339 => Some(SyntaxKind::Concurrently),
        340 => Some(SyntaxKind::Configuration),
        341 => Some(SyntaxKind::Conflict),
        342 => Some(SyntaxKind::Connection),
        343 => Some(SyntaxKind::Constraint),
        344 => Some(SyntaxKind::Constraints),
        345 => Some(SyntaxKind::ContentP),
        346 => Some(SyntaxKind::ContinueP),
        347 => Some(SyntaxKind::ConversionP),
        348 => Some(SyntaxKind::Copy),
        349 => Some(SyntaxKind::Cost),
        350 => Some(SyntaxKind::Create),
        351 => Some(SyntaxKind::Cross),
        352 => Some(SyntaxKind::Csv),
        353 => Some(SyntaxKind::Cube),
        354 => Some(SyntaxKind::CurrentP),
        355 => Some(SyntaxKind::CurrentCatalog),
        356 => Some(SyntaxKind::CurrentDate),
        357 => Some(SyntaxKind::CurrentRole),
        358 => Some(SyntaxKind::CurrentSchema),
        359 => Some(SyntaxKind::CurrentTime),
        360 => Some(SyntaxKind::CurrentTimestamp),
        361 => Some(SyntaxKind::CurrentUser),
        362 => Some(SyntaxKind::Cursor),
        363 => Some(SyntaxKind::Cycle),
        364 => Some(SyntaxKind::DataP),
        365 => Some(SyntaxKind::Database),
        366 => Some(SyntaxKind::DayP),
        367 => Some(SyntaxKind::Deallocate),
        368 => Some(SyntaxKind::Dec),
        369 => Some(SyntaxKind::DecimalP),
        370 => Some(SyntaxKind::Declare),
        371 => Some(SyntaxKind::Default),
        372 => Some(SyntaxKind::Defaults),
        373 => Some(SyntaxKind::Deferrable),
        374 => Some(SyntaxKind::Deferred),
        375 => Some(SyntaxKind::Definer),
        376 => Some(SyntaxKind::DeleteP),
        377 => Some(SyntaxKind::Delimiter),
        378 => Some(SyntaxKind::Delimiters),
        379 => Some(SyntaxKind::Depends),
        380 => Some(SyntaxKind::Desc),
        381 => Some(SyntaxKind::Detach),
        382 => Some(SyntaxKind::Dictionary),
        383 => Some(SyntaxKind::DisableP),
        384 => Some(SyntaxKind::Discard),
        385 => Some(SyntaxKind::Distinct),
        386 => Some(SyntaxKind::Do),
        387 => Some(SyntaxKind::DocumentP),
        388 => Some(SyntaxKind::DomainP),
        389 => Some(SyntaxKind::DoubleP),
        390 => Some(SyntaxKind::Drop),
        391 => Some(SyntaxKind::Each),
        392 => Some(SyntaxKind::Else),
        393 => Some(SyntaxKind::EnableP),
        394 => Some(SyntaxKind::Encoding),
        395 => Some(SyntaxKind::Encrypted),
        396 => Some(SyntaxKind::EndP),
        397 => Some(SyntaxKind::EnumP),
        398 => Some(SyntaxKind::Escape),
        399 => Some(SyntaxKind::Event),
        400 => Some(SyntaxKind::Except),
        401 => Some(SyntaxKind::Exclude),
        402 => Some(SyntaxKind::Excluding),
        403 => Some(SyntaxKind::Exclusive),
        404 => Some(SyntaxKind::Execute),
        405 => Some(SyntaxKind::Exists),
        406 => Some(SyntaxKind::Explain),
        407 => Some(SyntaxKind::Expression),
        408 => Some(SyntaxKind::Extension),
        409 => Some(SyntaxKind::External),
        410 => Some(SyntaxKind::Extract),
        411 => Some(SyntaxKind::FalseP),
        412 => Some(SyntaxKind::Family),
        413 => Some(SyntaxKind::Fetch),
        414 => Some(SyntaxKind::Filter),
        415 => Some(SyntaxKind::FirstP),
        416 => Some(SyntaxKind::FloatP),
        417 => Some(SyntaxKind::Following),
        418 => Some(SyntaxKind::For),
        419 => Some(SyntaxKind::Force),
        420 => Some(SyntaxKind::Foreign),
        421 => Some(SyntaxKind::Forward),
        422 => Some(SyntaxKind::Freeze),
        423 => Some(SyntaxKind::From),
        424 => Some(SyntaxKind::Full),
        425 => Some(SyntaxKind::Function),
        426 => Some(SyntaxKind::Functions),
        427 => Some(SyntaxKind::Generated),
        428 => Some(SyntaxKind::Global),
        429 => Some(SyntaxKind::Grant),
        430 => Some(SyntaxKind::Granted),
        431 => Some(SyntaxKind::Greatest),
        432 => Some(SyntaxKind::GroupP),
        433 => Some(SyntaxKind::Grouping),
        434 => Some(SyntaxKind::Groups),
        435 => Some(SyntaxKind::Handler),
        436 => Some(SyntaxKind::Having),
        437 => Some(SyntaxKind::HeaderP),
        438 => Some(SyntaxKind::Hold),
        439 => Some(SyntaxKind::HourP),
        440 => Some(SyntaxKind::IdentityP),
        441 => Some(SyntaxKind::IfP),
        442 => Some(SyntaxKind::Ilike),
        443 => Some(SyntaxKind::Immediate),
        444 => Some(SyntaxKind::Immutable),
        445 => Some(SyntaxKind::ImplicitP),
        446 => Some(SyntaxKind::ImportP),
        447 => Some(SyntaxKind::InP),
        448 => Some(SyntaxKind::Include),
        449 => Some(SyntaxKind::Including),
        450 => Some(SyntaxKind::Increment),
        451 => Some(SyntaxKind::Index),
        452 => Some(SyntaxKind::Indexes),
        453 => Some(SyntaxKind::Inherit),
        454 => Some(SyntaxKind::Inherits),
        455 => Some(SyntaxKind::Initially),
        456 => Some(SyntaxKind::InlineP),
        457 => Some(SyntaxKind::InnerP),
        458 => Some(SyntaxKind::Inout),
        459 => Some(SyntaxKind::InputP),
        460 => Some(SyntaxKind::Insensitive),
        461 => Some(SyntaxKind::Insert),
        462 => Some(SyntaxKind::Instead),
        463 => Some(SyntaxKind::IntP),
        464 => Some(SyntaxKind::Integer),
        465 => Some(SyntaxKind::Intersect),
        466 => Some(SyntaxKind::Interval),
        467 => Some(SyntaxKind::Into),
        468 => Some(SyntaxKind::Invoker),
        469 => Some(SyntaxKind::Is),
        470 => Some(SyntaxKind::Isnull),
        471 => Some(SyntaxKind::Isolation),
        472 => Some(SyntaxKind::Join),
        473 => Some(SyntaxKind::Key),
        474 => Some(SyntaxKind::Label),
        475 => Some(SyntaxKind::Language),
        476 => Some(SyntaxKind::LargeP),
        477 => Some(SyntaxKind::LastP),
        478 => Some(SyntaxKind::LateralP),
        479 => Some(SyntaxKind::Leading),
        480 => Some(SyntaxKind::Leakproof),
        481 => Some(SyntaxKind::Least),
        482 => Some(SyntaxKind::Left),
        483 => Some(SyntaxKind::Level),
        484 => Some(SyntaxKind::Like),
        485 => Some(SyntaxKind::Limit),
        486 => Some(SyntaxKind::Listen),
        487 => Some(SyntaxKind::Load),
        488 => Some(SyntaxKind::Local),
        489 => Some(SyntaxKind::Localtime),
        490 => Some(SyntaxKind::Localtimestamp),
        491 => Some(SyntaxKind::Location),
        492 => Some(SyntaxKind::LockP),
        493 => Some(SyntaxKind::Locked),
        494 => Some(SyntaxKind::Logged),
        495 => Some(SyntaxKind::Mapping),
        496 => Some(SyntaxKind::Match),
        497 => Some(SyntaxKind::Materialized),
        498 => Some(SyntaxKind::Maxvalue),
        499 => Some(SyntaxKind::Method),
        500 => Some(SyntaxKind::MinuteP),
        501 => Some(SyntaxKind::Minvalue),
        502 => Some(SyntaxKind::Mode),
        503 => Some(SyntaxKind::MonthP),
        504 => Some(SyntaxKind::Move),
        505 => Some(SyntaxKind::NameP),
        506 => Some(SyntaxKind::Names),
        507 => Some(SyntaxKind::National),
        508 => Some(SyntaxKind::Natural),
        509 => Some(SyntaxKind::Nchar),
        510 => Some(SyntaxKind::New),
        511 => Some(SyntaxKind::Next),
        512 => Some(SyntaxKind::Nfc),
        513 => Some(SyntaxKind::Nfd),
        514 => Some(SyntaxKind::Nfkc),
        515 => Some(SyntaxKind::Nfkd),
        516 => Some(SyntaxKind::No),
        517 => Some(SyntaxKind::None),
        518 => Some(SyntaxKind::Normalize),
        519 => Some(SyntaxKind::Normalized),
        520 => Some(SyntaxKind::Not),
        521 => Some(SyntaxKind::Nothing),
        522 => Some(SyntaxKind::Notify),
        523 => Some(SyntaxKind::Notnull),
        524 => Some(SyntaxKind::Nowait),
        525 => Some(SyntaxKind::NullP),
        526 => Some(SyntaxKind::Nullif),
        527 => Some(SyntaxKind::NullsP),
        528 => Some(SyntaxKind::Numeric),
        529 => Some(SyntaxKind::ObjectP),
        530 => Some(SyntaxKind::Of),
        531 => Some(SyntaxKind::Off),
        532 => Some(SyntaxKind::Offset),
        533 => Some(SyntaxKind::Oids),
        534 => Some(SyntaxKind::Old),
        535 => Some(SyntaxKind::On),
        536 => Some(SyntaxKind::Only),
        537 => Some(SyntaxKind::Operator),
        538 => Some(SyntaxKind::Option),
        539 => Some(SyntaxKind::Options),
        540 => Some(SyntaxKind::Or),
        541 => Some(SyntaxKind::Order),
        542 => Some(SyntaxKind::Ordinality),
        543 => Some(SyntaxKind::Others),
        544 => Some(SyntaxKind::OutP),
        545 => Some(SyntaxKind::OuterP),
        546 => Some(SyntaxKind::Over),
        547 => Some(SyntaxKind::Overlaps),
        548 => Some(SyntaxKind::Overlay),
        549 => Some(SyntaxKind::Overriding),
        550 => Some(SyntaxKind::Owned),
        551 => Some(SyntaxKind::Owner),
        552 => Some(SyntaxKind::Parallel),
        553 => Some(SyntaxKind::Parser),
        554 => Some(SyntaxKind::Partial),
        555 => Some(SyntaxKind::Partition),
        556 => Some(SyntaxKind::Passing),
        557 => Some(SyntaxKind::Password),
        558 => Some(SyntaxKind::Placing),
        559 => Some(SyntaxKind::Plans),
        560 => Some(SyntaxKind::Policy),
        561 => Some(SyntaxKind::Position),
        562 => Some(SyntaxKind::Preceding),
        563 => Some(SyntaxKind::Precision),
        564 => Some(SyntaxKind::Preserve),
        565 => Some(SyntaxKind::Prepare),
        566 => Some(SyntaxKind::Prepared),
        567 => Some(SyntaxKind::Primary),
        568 => Some(SyntaxKind::Prior),
        569 => Some(SyntaxKind::Privileges),
        570 => Some(SyntaxKind::Procedural),
        571 => Some(SyntaxKind::Procedure),
        572 => Some(SyntaxKind::Procedures),
        573 => Some(SyntaxKind::Program),
        574 => Some(SyntaxKind::Publication),
        575 => Some(SyntaxKind::Quote),
        576 => Some(SyntaxKind::Range),
        577 => Some(SyntaxKind::Read),
        578 => Some(SyntaxKind::Real),
        579 => Some(SyntaxKind::Reassign),
        580 => Some(SyntaxKind::Recheck),
        581 => Some(SyntaxKind::Recursive),
        582 => Some(SyntaxKind::Ref),
        583 => Some(SyntaxKind::References),
        584 => Some(SyntaxKind::Referencing),
        585 => Some(SyntaxKind::Refresh),
        586 => Some(SyntaxKind::Reindex),
        587 => Some(SyntaxKind::RelativeP),
        588 => Some(SyntaxKind::Release),
        589 => Some(SyntaxKind::Rename),
        590 => Some(SyntaxKind::Repeatable),
        591 => Some(SyntaxKind::Replace),
        592 => Some(SyntaxKind::Replica),
        593 => Some(SyntaxKind::Reset),
        594 => Some(SyntaxKind::Restart),
        595 => Some(SyntaxKind::Restrict),
        596 => Some(SyntaxKind::Returning),
        597 => Some(SyntaxKind::Returns),
        598 => Some(SyntaxKind::Revoke),
        599 => Some(SyntaxKind::Right),
        600 => Some(SyntaxKind::Role),
        601 => Some(SyntaxKind::Rollback),
        602 => Some(SyntaxKind::Rollup),
        603 => Some(SyntaxKind::Routine),
        604 => Some(SyntaxKind::Routines),
        605 => Some(SyntaxKind::Row),
        606 => Some(SyntaxKind::Rows),
        607 => Some(SyntaxKind::Rule),
        608 => Some(SyntaxKind::Savepoint),
        609 => Some(SyntaxKind::Schema),
        610 => Some(SyntaxKind::Schemas),
        611 => Some(SyntaxKind::Scroll),
        612 => Some(SyntaxKind::Search),
        613 => Some(SyntaxKind::SecondP),
        614 => Some(SyntaxKind::Security),
        615 => Some(SyntaxKind::Select),
        616 => Some(SyntaxKind::Sequence),
        617 => Some(SyntaxKind::Sequences),
        618 => Some(SyntaxKind::Serializable),
        619 => Some(SyntaxKind::Server),
        620 => Some(SyntaxKind::Session),
        621 => Some(SyntaxKind::SessionUser),
        622 => Some(SyntaxKind::Set),
        623 => Some(SyntaxKind::Sets),
        624 => Some(SyntaxKind::Setof),
        625 => Some(SyntaxKind::Share),
        626 => Some(SyntaxKind::Show),
        627 => Some(SyntaxKind::Similar),
        628 => Some(SyntaxKind::Simple),
        629 => Some(SyntaxKind::Skip),
        630 => Some(SyntaxKind::Smallint),
        631 => Some(SyntaxKind::Snapshot),
        632 => Some(SyntaxKind::Some),
        633 => Some(SyntaxKind::SqlP),
        634 => Some(SyntaxKind::Stable),
        635 => Some(SyntaxKind::StandaloneP),
        636 => Some(SyntaxKind::Start),
        637 => Some(SyntaxKind::Statement),
        638 => Some(SyntaxKind::Statistics),
        639 => Some(SyntaxKind::Stdin),
        640 => Some(SyntaxKind::Stdout),
        641 => Some(SyntaxKind::Storage),
        642 => Some(SyntaxKind::Stored),
        643 => Some(SyntaxKind::StrictP),
        644 => Some(SyntaxKind::StripP),
        645 => Some(SyntaxKind::Subscription),
        646 => Some(SyntaxKind::Substring),
        647 => Some(SyntaxKind::Support),
        648 => Some(SyntaxKind::Symmetric),
        649 => Some(SyntaxKind::Sysid),
        650 => Some(SyntaxKind::SystemP),
        651 => Some(SyntaxKind::Table),
        652 => Some(SyntaxKind::Tables),
        653 => Some(SyntaxKind::Tablesample),
        654 => Some(SyntaxKind::Tablespace),
        655 => Some(SyntaxKind::Temp),
        656 => Some(SyntaxKind::Template),
        657 => Some(SyntaxKind::Temporary),
        658 => Some(SyntaxKind::TextP),
        659 => Some(SyntaxKind::Then),
        660 => Some(SyntaxKind::Ties),
        661 => Some(SyntaxKind::Time),
        662 => Some(SyntaxKind::Timestamp),
        663 => Some(SyntaxKind::To),
        664 => Some(SyntaxKind::Trailing),
        665 => Some(SyntaxKind::Transaction),
        666 => Some(SyntaxKind::Transform),
        667 => Some(SyntaxKind::Treat),
        668 => Some(SyntaxKind::Trigger),
        669 => Some(SyntaxKind::Trim),
        670 => Some(SyntaxKind::TrueP),
        671 => Some(SyntaxKind::Truncate),
        672 => Some(SyntaxKind::Trusted),
        673 => Some(SyntaxKind::TypeP),
        674 => Some(SyntaxKind::TypesP),
        675 => Some(SyntaxKind::Uescape),
        676 => Some(SyntaxKind::Unbounded),
        677 => Some(SyntaxKind::Uncommitted),
        678 => Some(SyntaxKind::Unencrypted),
        679 => Some(SyntaxKind::Union),
        680 => Some(SyntaxKind::Unique),
        681 => Some(SyntaxKind::Unknown),
        682 => Some(SyntaxKind::Unlisten),
        683 => Some(SyntaxKind::Unlogged),
        684 => Some(SyntaxKind::Until),
        685 => Some(SyntaxKind::Update),
        686 => Some(SyntaxKind::User),
        687 => Some(SyntaxKind::Using),
        688 => Some(SyntaxKind::Vacuum),
        689 => Some(SyntaxKind::Valid),
        690 => Some(SyntaxKind::Validate),
        691 => Some(SyntaxKind::Validator),
        692 => Some(SyntaxKind::ValueP),
        693 => Some(SyntaxKind::Values),
        694 => Some(SyntaxKind::Varchar),
        695 => Some(SyntaxKind::Variadic),
        696 => Some(SyntaxKind::Varying),
        697 => Some(SyntaxKind::Verbose),
        698 => Some(SyntaxKind::VersionP),
        699 => Some(SyntaxKind::View),
        700 => Some(SyntaxKind::Views),
        701 => Some(SyntaxKind::Volatile),
        702 => Some(SyntaxKind::When),
        703 => Some(SyntaxKind::Where),
        704 => Some(SyntaxKind::WhitespaceP),
        705 => Some(SyntaxKind::Window),
        706 => Some(SyntaxKind::With),
        707 => Some(SyntaxKind::Within),
        708 => Some(SyntaxKind::Without),
        709 => Some(SyntaxKind::Work),
        710 => Some(SyntaxKind::Wrapper),
        711 => Some(SyntaxKind::Write),
        712 => Some(SyntaxKind::XmlP),
        713 => Some(SyntaxKind::Xmlattributes),
        714 => Some(SyntaxKind::Xmlconcat),
        715 => Some(SyntaxKind::Xmlelement),
        716 => Some(SyntaxKind::Xmlexists),
        717 => Some(SyntaxKind::Xmlforest),
        718 => Some(SyntaxKind::Xmlnamespaces),
        719 => Some(SyntaxKind::Xmlparse),
        720 => Some(SyntaxKind::Xmlpi),
        721 => Some(SyntaxKind::Xmlroot),
        722 => Some(SyntaxKind::Xmlserialize),
        723 => Some(SyntaxKind::Xmltable),
        724 => Some(SyntaxKind::YearP),
        725 => Some(SyntaxKind::YesP),
        726 => Some(SyntaxKind::Zone),
        727 => Some(SyntaxKind::NotLa),
        728 => Some(SyntaxKind::NullsLa),
        729 => Some(SyntaxKind::WithLa),
        730 => Some(SyntaxKind::Postfixop),
        731 => Some(SyntaxKind::Uminus),
        _ => None,
    }
}

pub fn convert_expr_token_to_syntax_kind(token: &ExprToken) -> Option<SyntaxKind> {
    println!("converting: {:?}", token);
    match token {
        ExprToken::Ascii37 => Some(SyntaxKind::Ascii37),
        ExprToken::Ascii40 => Some(SyntaxKind::Ascii40),
        ExprToken::Ascii41 => Some(SyntaxKind::Ascii41),
        ExprToken::Ascii42 => Some(SyntaxKind::Ascii42),
        ExprToken::Ascii43 => Some(SyntaxKind::Ascii43),
        ExprToken::Ascii44 => Some(SyntaxKind::Ascii44),
        ExprToken::Ascii45 => Some(SyntaxKind::Ascii45),
        ExprToken::Ascii46 => Some(SyntaxKind::Ascii46),
        ExprToken::Ascii47 => Some(SyntaxKind::Ascii47),
        ExprToken::Ascii58 => Some(SyntaxKind::Ascii58),
        ExprToken::Ascii59 => Some(SyntaxKind::Ascii59),
        ExprToken::Ascii60 => Some(SyntaxKind::Ascii60),
        ExprToken::Ascii61 => Some(SyntaxKind::Ascii61),
        ExprToken::Ascii62 => Some(SyntaxKind::Ascii62),
        ExprToken::Ascii63 => Some(SyntaxKind::Ascii63),
        ExprToken::Ascii91 => Some(SyntaxKind::Ascii91),
        ExprToken::Ascii92 => Some(SyntaxKind::Ascii92),
        ExprToken::Ascii93 => Some(SyntaxKind::Ascii93),
        ExprToken::Ascii94 => Some(SyntaxKind::Ascii94),
        ExprToken::Keyword => Some(SyntaxKind::Keyword),
        ExprToken::Whitespace => Some(SyntaxKind::Whitespace),
        ExprToken::Newline => Some(SyntaxKind::Newline),
        ExprToken::Tab => Some(SyntaxKind::Tab),
        ExprToken::Sconst => Some(SyntaxKind::Sconst),
        ExprToken::Comment => Some(SyntaxKind::Comment),
    }
}

pub fn get_position_for_pg_query_node(node: &NodeRef) -> Option<i32> {
    match node {
        NodeRef::ResTarget(n) => Some(n.location),
        NodeRef::AExpr(n) => Some(n.location),
        NodeRef::RangeVar(n) => Some(n.location),
        NodeRef::ColumnRef(n) => Some(n.location),
        NodeRef::AConst(n) => Some(n.location),
        _ => Some(-1),
    }
}
